package com.mfu.dao.Kmean;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.mfu.entity.Kmean.ImpacFactorCluster;

public class ImpacFactorClusterDAO {
	private static final EntityManagerFactory emfInstance = Persistence
			.createEntityManagerFactory("transactions-optional");

	private EntityManager em = null;

	public ImpacFactorClusterDAO() {
		em = emfInstance.createEntityManager();
	}

	public List<ImpacFactorCluster> getAllClustering() {
		List<ImpacFactorCluster> clusterings = null;
		try {
			Query q = em.createQuery("select p from ImpacFactorCluster p");
			clusterings = q.getResultList();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return clusterings;
	}

	public ImpacFactorCluster findClusteringByKey(String key) {
		ImpacFactorCluster clustering = null;
		try {
			Query q = em.createQuery("select p from ImpacFactorCluster p where p.key = :key");
			q.setParameter("key", key);
			List<ImpacFactorCluster> clusterings = q.getResultList();
			clustering = clusterings.get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return clustering;
	}

	public void saveClustering(ImpacFactorCluster clustering) {
		try {
			em.persist(clustering);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void updateClustering(ImpacFactorCluster clustering) {
		try {
			em.merge(clustering);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public List<ImpacFactorCluster> findClusteringByImpactFactorID(String key) {
		List<ImpacFactorCluster> clusterings = null;
		try {
			Query q = em.createQuery("select p from ImpacFactorCluster p where p.ImpactFactorID = :key");
			q.setParameter("key", key);
			clusterings = q.getResultList();
			if(clusterings.size()==0){
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return clusterings;
	}
	
	public void deleteClustering(String key) {

		ImpacFactorCluster clustering = this.findClusteringByKey(key);
		if (clustering != null)
			em.remove(clustering);
	}

	public void closeEntityManager() {

		if (em != null)
			em.close();
	}
	
	public ImpacFactorCluster findClusteringByLevel(int level) {
		ImpacFactorCluster clustering = null;
		try {
			Query q = em.createQuery("select p from ImpacFactorCluster p where p.level = :level");
			q.setParameter("level", level);
			List<ImpacFactorCluster> clusterings = q.getResultList();
			clustering = clusterings.get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return clustering;
	}
	
	public List<ImpacFactorCluster> findClusteringByImpactFactorName(String imName) {
		List<ImpacFactorCluster> im = null;
		try {
			Query q = em.createQuery("select p from ImpacFactorCluster p where p.imName = :imName");

			q.setParameter("imName", imName);
			im = q.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
		}

		return im;
	}

	public List<ImpacFactorCluster> TakeAllClusteringBySymptom(String symptomName) {
		List<ImpacFactorCluster> clusterings = null;
		try {
			Query q = em.createQuery("select p from ImpacFactorCluster p where p.symptomName = :symptomName ORDER BY p.imName, p.level");
			
			q.setParameter("symptomName", symptomName);
			clusterings = q.getResultList();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return clusterings;
	}

}