package com.mfu.web.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mfu.dao.common.UserDAO;
import com.mfu.dao.record.PatientDAO;
import com.mfu.entity.common.User;
import com.mfu.entity.record.Patient;
import com.mfu.entity.record.VitalSign;
import com.mfu.util.SecurityUtil;
import com.mfu.util.StringUtil;


@Controller
public class PatientController {

	@RequestMapping(value = "/listPatientWS", method = RequestMethod.GET)
	@ResponseBody
	public List<Patient> listPatientWS(HttpServletRequest request) {
		
		PatientDAO patientService = new PatientDAO();
		List<Patient> patients = patientService.getAllPatient();
		patientService.closeEntityManager();
		return patients;
	}


	@RequestMapping(value = "/findPatientByIdWS", method = RequestMethod.GET)
	@ResponseBody
	public Patient findPatientByIdWS(HttpServletRequest request) {
		
		Patient patient = null;
		PatientDAO patientService = new PatientDAO();
		try {

			patient = patientService.findPatientByKey(request.getParameter("patientId"));

		} catch (Exception e) {
			e.printStackTrace();
		}
		patientService.closeEntityManager();
		return patient;
	}

/*	
	@RequestMapping(value = "/loginPatientWS", method = RequestMethod.POST)
	@ResponseBody
	public User loginPatientWS(HttpServletRequest request) {
		if (userLoginSecurity(request)) {
			return null;
		}
		User user = null;
		UserDAO service = new UserDAO();
		if (request.getParameter("username") != null && request.getParameter("password") != null) {
			user = service.authenticate(request.getParameter("username"), request.getParameter("password"));

		}
		service.closeEntityManager();
		return user;
	}
*/
	
	@RequestMapping(value = "/savePatientWS", method = RequestMethod.POST)
	@ResponseBody
	public String savePatientWS(@RequestBody Patient patient, HttpServletRequest request) {
		
		PatientDAO patientService = new PatientDAO();
		try {

			patient.setProfilePicture("profile-default.png");
			patientService.savePatient(patient);

		} catch (Exception e) {
			e.printStackTrace();
			return "-1";
		}
		patientService.closeEntityManager();

		return "1";
	}
	
	@RequestMapping(value = "/recordPatientProfileWS", method = RequestMethod.POST)
	@ResponseBody
	public String recordPatientProfileWS(@RequestBody Patient patient, HttpServletRequest request) {
		
		PatientDAO dao = new PatientDAO();
		try {
			Patient p = dao.findPatientByKey(patient.getKeyString());
			if(patient.getCodeHN()!=null && !"".equals(patient.getCodeHN()))
				p.setCodeHN(patient.getCodeHN());
			p.setBirthdate(patient.getBirthdate());
			p.setGender(patient.getGender());
			p.setBloodGroup(patient.getBloodGroup());
			p.setBloodRH(patient.getBloodRH());
			p.setMaterialStatus(patient.getMaterialStatus());
			p.setNationality(patient.getNationality());
			p.setRace(patient.getRace());
			dao.updatePatient(p);

		} catch (Exception e) {
			e.printStackTrace();
			return "-1";
		}finally{
			dao.closeEntityManager();
		}

		return "1";
	}
	
	@RequestMapping(value = "/recordVitalSignWS", method = RequestMethod.POST)
	@ResponseBody
	public String recordVitalSignWS(@RequestBody VitalSign v, HttpServletRequest request) {
		
		PatientDAO dao = new PatientDAO();
		try {
			Patient p = dao.findPatientsByHospitalNumber(v.getCodeHN());
			if(p!=null){
				v.setPatientId(p.getKeyString());
				v.setUpdateDate(new Date());
				dao.insertVitalSign(v);
			}

		} catch (Exception e) {
			e.printStackTrace();
			return "-1";
		}finally{
			dao.closeEntityManager();
		}
		
		return "1";
	}
	
	@RequestMapping(value = "/getLatestVitalSignWS", method = RequestMethod.GET)
	public @ResponseBody VitalSign getLatestVitalSign(HttpServletRequest request){
		String patientid =request.getParameter("patientid");
		String codeHN = request.getParameter("codeHN");
		VitalSign v = null;
		PatientDAO dao = new PatientDAO();
		try{
			if(patientid !=null){
				
				List<VitalSign> result = dao.getVitalSignByPatient(patientid);
				if(result!=null && result.size()>0)
					v = result.get(0);
			} else if(codeHN !=null){
				Patient p = dao.findPatientsByHospitalNumber(codeHN);
				List<VitalSign> result =  dao.getVitalSignByPatient(p.getKeyString());
				if(result!=null && result.size()>0)
					v = result.get(0);
			}
		//	System.out.println(v.getKey());
		} catch(Exception e){
			e.printStackTrace();
		}finally{
			dao.closeEntityManager();
		}
			
		return v;
	}
	


	@RequestMapping(value = "/searchPatientByHospitalNumberWS", method = RequestMethod.GET)
	public @ResponseBody Patient searchPatientByHospitalNumberWS(HttpServletRequest request) {
		
		PatientDAO patientService = new PatientDAO();
		Patient patient = patientService.findPatientsByHospitalNumber(request.getParameter("hospitalNumber"));
		patientService.closeEntityManager();
		return patient;
	}

	@RequestMapping(value = "/checkPatientPasswordWS")
	public @ResponseBody String checkPatientPasswordWSWS(HttpServletRequest request) {
		
		SecurityUtil securityService = new SecurityUtil();
		if (securityService.passwordToMD5(request.getParameter("password"))
				.equals(request.getParameter("currentPassword"))) {
			return "1";
		}

		return "0";
	}

	@RequestMapping(value = "/deletePatientWS", method = RequestMethod.DELETE)
	public @ResponseBody String removePatient(HttpServletRequest request) {
		
		try {
			PatientDAO patientService = new PatientDAO();
			patientService.deletePatient(request.getParameter("patientId"));
			patientService.closeEntityManager();
		} catch (Exception e) {
			e.printStackTrace();
			return "-1";
		}

		return "1";

	}
/**
	@RequestMapping(value = "/patientTester", method = RequestMethod.GET)
	public @ResponseBody String patientTester(HttpServletRequest request) {
		if (userLoginSecurity(request)) {
			return null;
		}
		try {
			PatientDAO patientService = new PatientDAO();

			Patient patient = new Patient();
			patient.setContact("0956888888");
			patient.setFirstname("Dave");
			patient.setLastname("D");
			patient.setCodeHN("1021548225");

			patientService.savePatient(patient);

			patientService.closeEntityManager();
		} catch (Exception e) {
			e.printStackTrace();
			return "-1";
		}

		return "1";

	}
**/	
	@RequestMapping(value = "/genTestPatient", method = RequestMethod.GET)
	public @ResponseBody String genTestPatient(HttpServletRequest request) {
		
		try {
						
			int num = Integer.parseInt(request.getParameter("num"));
			
			for(int i=0; i<num; i++){
				PatientDAO patientService = new PatientDAO();
				Patient patient = new Patient();
				patient.setContact(StringUtil.randomNumber(10));
				patient.setFirstname(StringUtil.randomString(10));
				patient.setLastname(StringUtil.randomString(10));
				patient.setCodeHN(StringUtil.randomNumber(8));
	
				patientService.savePatient(patient);
				patientService.closeEntityManager();
			}

			
		} catch (Exception e) {
			e.printStackTrace();
			return "-1";
		}

		return "1";

	}
	
	@RequestMapping(value = "/fixPatient", method = RequestMethod.GET)
	public @ResponseBody String fixPatient(HttpServletRequest request) {
		PatientDAO dao = new PatientDAO();
		Patient p =dao.findPatientByKey("ag5rc21zZXJ2LTE1NDcyM3IUCxIHUGF0aWVudBiAgICAgIDECQw");
		p.setCodeHN("33199713");
		dao.savePatient(p);
		dao.closeEntityManager();
		return "1";
	}

}